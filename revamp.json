{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "AWS cloudwatch alarms and metrics template",
	"Parameters": {
		"AlarmName": {
			"Type": "String",
			"Description": "Alarm name for notification emails"
		},
		"AllConfigurationEmail": {
			"Type": "String",
			"Description": "Email for receiving all AWS configuration events"
		},
		"AllConfigurationDisplayName": {
			"Type": "String",
			"Default": "CloudWatch-Notifications",
			"Description": "SNS display name for all AWS configuration events"
		},
		"AllConfigurationTopicName": {
			"Type": "String",
			"Default": "All-Config-Notifications",
			"Description": "SNS display name for all AWS configuration events"
		},
		"LogGroupName": {
			"Type": "String",
			"Default": "CloudTrail/DefaultLogGroup",
			"Description": "Enter CloudWatch Logs log group name. Default is CloudTrail/DefaultLogGroup"
		}
	},
	"Resources": {
		"SNSAllConfigurationTopic": {
			"Type": "AWS::SNS::Topic",
			"Properties": {
				"DisplayName": {
					"Ref": "AllConfigurationDisplayName"
				},
				"TopicName": {
					"Ref": "AllConfigurationTopicName"
				}
			}
		},
		"SNSAllConfigurationTopicPolicy": {
			"Type": "AWS::SNS::TopicPolicy",
			"Properties": {
				"Topics": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
				"PolicyDocument": {
					"Statement": [
						{
							"Sid": "AWSSNSPolicy",
							"Action": [
								"sns:Publish"
							],
							"Effect": "Allow",
							"Resource": {
								"Ref": "SNSAllConfigurationTopic"
							},
							"Principal": {
								"Service": [
									"cloudtrail.amazonaws.com",
									"config.amazonaws.com",
									"cloudwatch.amazonaws.com"
								]
							}
						}
					]
				}
			}
		},
		"SNSAllConfigurationEmailNotification": {
			"Type": "AWS::SNS::Subscription",
			"Properties": {
				"Endpoint": {
					"Ref": "AllConfigurationEmail"
				},
				"Protocol": "email",
				"TopicArn": {
					"Ref": "SNSAllConfigurationTopic"
				}
			}
		},
		"SecurityGroupChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }",
				"MetricTransformations": [
					{
						"MetricNamespace": "LogMetrics",
						"MetricName": "SecurityGroupEventCount",
						"MetricValue": "1"
					}
				]
			}
		},
		"SecurityGroupChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": "SNSAllConfigurationTopic",
			"Properties": {
				"AlarmName": {
					"Fn::Join": [
						":",
						[
							{
								"Ref": "AlarmName"
							},
							"SecurityGroupChangesAlarm"
						]
					]
				},
				"AlarmDescription": "Alarms when an API call is made to create, update or delete a Security Group.",
				"AlarmActions": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
				"MetricName": "SecurityGroupEventCount",
				"Namespace": "LogMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1",
				"TreatMissingData": "notBreaching"
			}
		},
		"NetworkAclChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }",
				"MetricTransformations": [
					{
						"MetricNamespace": "LogMetrics",
						"MetricName": "NetworkAclEventCount",
						"MetricValue": "1"
					}
				]
			}
		},
		"NetworkAclChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"SecurityGroupChangesAlarm",
				"SNSAllConfigurationTopic"
			],
			"Properties": {
				"AlarmName": {
					"Fn::Join": [
						":",
						[
							{
								"Ref": "AlarmName"
							},
							"NetworkAclChangesAlarm"
						]
					]
				},
				"AlarmDescription": "Alarms when an API call is made to create, update or delete a Network ACL.",
				"AlarmActions": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
				"MetricName": "NetworkAclEventCount",
				"Namespace": "LogMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1",
				"TreatMissingData": "notBreaching"
			}
		},
		"GatewayChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }",
				"MetricTransformations": [
					{
						"MetricNamespace": "LogMetrics",
						"MetricName": "GatewayEventCount",
						"MetricValue": "1"
					}
				]
			}
		},
		"GatewayChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"NetworkAclChangesAlarm",
				"SNSAllConfigurationTopic"
			],
			"Properties": {
				"AlarmName": {
					"Fn::Join": [
						":",
						[
							{
								"Ref": "AlarmName"
							},
							"GatewayChangesAlarm"
						]
					]
				},
				"AlarmDescription": "Alarms when an API call is made to create, update or delete a Customer or Internet Gateway.",
				"AlarmActions": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
				"MetricName": "GatewayEventCount",
				"Namespace": "LogMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1",
				"TreatMissingData": "notBreaching"
			}
		},
		"VpcChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }",
				"MetricTransformations": [
					{
						"MetricNamespace": "LogMetrics",
						"MetricName": "VpcEventCount",
						"MetricValue": "1"
					}
				]
			}
		},
		"VpcChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"GatewayChangesAlarm",
				"SNSAllConfigurationTopic"
			],
			"Properties": {
				"AlarmName": {
					"Fn::Join": [
						":",
						[
							{
								"Ref": "AlarmName"
							},
							"VpcChangesAlarm"
						]
					]
				},
				"AlarmDescription": "Alarms when an API call is made to create, update or delete a VPC, VPC peering connection or VPC connection to classic.",
				"AlarmActions": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
				"MetricName": "VpcEventCount",
				"Namespace": "LogMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1",
				"TreatMissingData": "notBreaching"
			}
		},
		"CloudTrailChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }",
				"MetricTransformations": [
					{
						"MetricNamespace": "LogMetrics",
						"MetricName": "CloudTrailEventCount",
						"MetricValue": "1"
					}
				]
			}
		},
		"CloudTrailChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"SNSAllConfigurationTopic"
			],
			"Properties": {
				"AlarmName": {
					"Fn::Join": [
						":",
						[
							{
								"Ref": "AlarmName"
							},
							"CloudTrailChangesAlarm"
						]
					]
				},
				"AlarmDescription": "Alarms when an API call is made to create, update or delete a CloudTrail trail, or to start or stop logging to a trail.",
				"AlarmActions": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
				"MetricName": "CloudTrailEventCount",
				"Namespace": "LogMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1",
				"TreatMissingData": "notBreaching"
			}
		},
		"IAMPolicyChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{($.userIdentity.type=IAMUser)&&(($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy))}",
				"MetricTransformations": [
					{
						"MetricNamespace": "LogMetrics",
						"MetricName": "IAMPolicyEventCount",
						"MetricValue": "1"
					}
				]
			}
		},
		"IAMPolicyChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"SNSAllConfigurationTopic"
			],
			"Properties": {
				"AlarmName": {
					"Fn::Join": [
						":",
						[
							{
								"Ref": "AlarmName"
							},
							"IAMPolicyChangesAlarm"
						]
					]
				},
				"AlarmDescription": "Alarms when IAM policy changs are made.",
				"AlarmActions": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
				"MetricName": "IAMPolicyEventCount",
				"Namespace": "LogMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1",
				"TreatMissingData": "notBreaching"
			}
		},
		"ConsoleLoginWithoutMFAMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{($.eventName = \"ConsoleLogin\") && ($.responseElements.ConsoleLogin = \"Success\") && ($.additionalEventData.MFAUsed != \"Yes\")}",
				"MetricTransformations": [
					{
						"MetricNamespace": "LogMetrics",
						"MetricName": "ConsoleLoginWithoutMFAEventCount",
						"MetricValue": "1"
					}
				]
			}
		},
		"ConsoleLoginWithoutMFAAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"SNSAllConfigurationTopic"
			],
			"Properties": {
				"AlarmName": {
					"Fn::Join": [
						":",
						[
							{
								"Ref": "AlarmName"
							},
							"ConsoleLoginWithoutMFAAlarm"
						]
					]
				},
				"AlarmDescription": "Alarms when the user logs in without mfa.",
				"AlarmActions": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
				"MetricName": "ConsoleLoginWithoutMFAEventCount",
				"Namespace": "LogMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1",
				"TreatMissingData": "notBreaching"
			}
		},
		"CMKDisableDeleteMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{($.eventSource=kms.amazonaws.com) && (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))}",
				"MetricTransformations": [
					{
						"MetricNamespace": "LogMetrics",
						"MetricName": "CMKDisableDeleteEventCount",
						"MetricValue": "1"
					}
				]
			}
		},
		"CMKDisableDeleteAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"ConsoleLoginWithoutMFAAlarm",
				"SNSAllConfigurationTopic"
			],
			"Properties": {
				"AlarmName": {
					"Fn::Join": [
						":",
						[
							{
								"Ref": "AlarmName"
							},
							"CMKDisableDeleteAlarm"
						]
					]
				},
				"AlarmDescription": "Alarms when the CMKDisableDelete is disabled or scheduled for deletion.",
				"AlarmActions": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
				"MetricName": "CMKDisableDeleteEventCount",
				"Namespace": "LogMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1",
				"TreatMissingData": "notBreaching"
			}
		},
		"BucketPolicyChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{($.eventSource=s3.amazonaws.com) && (($.eventName=PutBucketAcl) || ($.eventName=PutBucketPolicy) || ($.eventName=PutBucketCors) || ($.eventName=PutBucketLifecycle) || ($.eventName=PutBucketReplication) || ($.eventName=DeleteBucketPolicy) || ($.eventName=DeleteBucketCors) || ($.eventName=DeleteBucketLifecycle) || ($.eventName=DeleteBucketReplication))}",
				"MetricTransformations": [
					{
						"MetricNamespace": "LogMetrics",
						"MetricName": "BucketPolicyChangesEventCount",
						"MetricValue": "1"
					}
				]
			}
		},
		"BucketPolicyChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"CMKDisableDeleteAlarm",
				"SNSAllConfigurationTopic"
			],
			"Properties": {
				"AlarmName": {
					"Fn::Join": [
						":",
						[
							{
								"Ref": "AlarmName"
							},
							"BucketPolicyChangesAlarm"
						]
					]
				},
				"AlarmDescription": "Alarms when S3 bucket policy is changed.",
				"AlarmActions": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
				"MetricName": "BucketPolicyChangesEventCount",
				"Namespace": "LogMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1",
				"TreatMissingData": "notBreaching"
			}
		},
        "UnauthorizedAPICallsMetricFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
              "LogGroupName": {
                "Ref": "LogGroupName" 
              },
              "FilterPattern": "{ ($.errorCode = \"UnauthorizedOperation\") || ($.errorCode = \"AccessDenied*\") }", 
              "MetricTransformations": [
                {
                  "MetricNamespace": "UnauthorizedAPICalls", 
                  "MetricName": "UnauthorizedAPICallCount",
                  "MetricValue": 1 
                }
              ]
            }
          },
          "UnauthorizedAPICallsAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "DependsOn": [
              "UnauthorizedAPICallsMetricFilter"  
            ],
            "Properties": {
              "AlarmName": {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "AlarmName" 
                    },
                    "UnauthorizedAPICalls"
                  ]
                ]
              },
              "AlarmDescription": "Alarms when unauthorized API calls are detected.",
              "AlarmActions": [
                {
                    "Ref": "SNSAllConfigurationTopic"
                }
                ],
              "MetricName": "UnauthorizedAPICallCount",
              "Namespace": "UnauthorizedAPICalls", 
              "ComparisonOperator": "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods": 1, 
              "Period": 300,
              "Statistic": "Sum",  
              "Threshold": "1",  
              "TreatMissingData": "notBreaching"  
            }
          },
          "ConfigChangesMetricFilter": {
            "Type": "AWS::Logs::MetricFilter",
            "Properties": {
              "LogGroupName": {
                "Ref": "LogGroupName"
              },
              "FilterPattern": "{($.messageType = \"ConfigurationChange\")}",
              "MetricTransformations": [
                {
                  "MetricNamespace": "ConfigChanges",
                  "MetricName": "ConfigChangeCount",
                  "MetricValue": 1
                }
              ]
            }
          },
          "ConfigChangesAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "DependsOn": [
              "ConfigChangesMetricFilter"
            ],
            "Properties": {
              "AlarmName": {
                "Fn::Join": [
                  ":",
                  [
                    {
                      "Ref": "AlarmName"
                    },
                    "ConfigChanges"
                  ]
                ]
              },
              "AlarmDescription": "Alarms when AWS Config rules detect configuration changes.",
              "AlarmActions": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
              "MetricName": "ConfigChangeCount",
              "Namespace": "ConfigChanges",
              "ComparisonOperator": "GreaterThanOrEqualToThreshold",
              "EvaluationPeriods": 1,
              "Period": 300,
              "Statistic": "Sum",
              "Threshold": "1",
              "TreatMissingData": "notBreaching"
            }
          },
		"RouteTableChangesMetricFilter": {
			"Type": "AWS::Logs::MetricFilter",
			"Properties": {
				"LogGroupName": {
					"Ref": "LogGroupName"
				},
				"FilterPattern": "{($.eventName=CreateRoute) || ($.eventName=CreateRouteTable) || ($.eventName=ReplaceRoute) || ($.eventName=ReplaceRouteTableAssociation) || ($.eventName=DeleteRouteTable) || ($.eventName=DeleteRoute) || ($.eventName=DisassociateRouteTable)}",
				"MetricTransformations": [
					{
						"MetricNamespace": "LogMetrics",
						"MetricName": "RouteTableChangesEventCount",
						"MetricValue": "1"
					}
				]
			}
		},
		"RouteTableChangesAlarm": {
			"Type": "AWS::CloudWatch::Alarm",
			"DependsOn": [
				"SNSAllConfigurationTopic"
			],
			"Properties": {
				"AlarmName": {
					"Fn::Join": [
						":",
						[
							{
								"Ref": "AlarmName"
							},
							"RouteTableChangesAlarm"
						]
					]
				},
				"AlarmDescription": "Alarms when route table configuration is changed.",
				"AlarmActions": [
					{
						"Ref": "SNSAllConfigurationTopic"
					}
				],
				"MetricName": "RouteTableChangesEventCount",
				"Namespace": "LogMetrics",
				"ComparisonOperator": "GreaterThanOrEqualToThreshold",
				"EvaluationPeriods": "1",
				"Period": "300",
				"Statistic": "Sum",
				"Threshold": "1",
				"TreatMissingData": "notBreaching"
			}
		}
	}
}
